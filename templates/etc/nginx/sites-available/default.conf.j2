# {{ ansible_managed }}

{% set item = (nginx_default_sites['default'] | combine(item.value, recursive=True)) %}

{% if item.upstreams %}
{%- for upstream in item.upstreams %}

upstream {{ upstream.name }} {
{% for server in upstream.servers %}
  server {{ server }};
{% endfor %}
}
{% endfor %}
{% endif %}

server {
  listen {{ item.listen_http }}{{ ' default deferred' if item.default_server else '' }};
  server_name {{ item.domains | join(' ') }};
  root {{ nginx_letsencrypt_root }};

  location /.well-known/acme-challenge/ {
    default_type "text/plain";

    try_files $uri =404;
  }

  location / {
    return 301 https://$host$request_uri;
  }
}

{% if (item.domains | length) > 1 %}
server {
  listen {{ item.listen_https }} ssl;
  server_name {{ item.domains[1] }};

  return 301 https://{{ item.domains[0] }}$request_uri;
}
{% endif %}

server {
  listen {{ item.listen_https }} ssl{{ ' default deferred' if item.default_server else '' }};
  server_name {{ item.domains[0] }};
  root {{ item.root }};
{% if item.directives is iterable %}
{% for directive in item.directives %}
{{ directive | indent(2, True) }};
{% endfor %}
{% endif %}

  ssl_protocols {{ item.ssl.protocols }};
  ssl_ciphers "{{ item.ssl.ciphers }}";
  ssl_prefer_server_ciphers {{ item.ssl.prefer_server_ciphers }};
  ssl_session_cache {{ item.ssl.session_cache }};
  ssl_session_timeout {{ item.ssl.session_timeout }};
  ssl_stapling {{ item.ssl.ssl_stapling }};
  ssl_stapling_verify {{ item.ssl.ssl_stapling_verify }};
  resolver {{ item.ssl.resolver }};
  resolver_timeout {{ item.ssl.resolver_timeout }};
  add_header {{ item.ssl.sts_header }};

  ssl_dhparam /etc/nginx/ssl/dhparam.pem;
  ssl_certificate /etc/nginx/ssl/{{ nginx_ssl_override_filename | default(item.domains[0]) }}.pem;
  ssl_certificate_key /etc/nginx/ssl/{{ nginx_ssl_override_filename | default(item.domains[0]) }}.key;
  ssl_trusted_certificate /etc/nginx/ssl/{{ nginx_ssl_override_filename | default(item.domains[0]) }}.pem;

{% if item.cache_all_locations.enabled %}
  expires {{ item.cache_all_locations.duration }};
  add_header Cache-Control public;
  add_header ETag "";
{% endif %}

{% if item.error_pages is iterable %}
{% for error in item.error_pages %}
  error_page {{ error.code }} /{{ error.page }};
{% endfor %}
{% endif %}
{% if item.serve_assets.enabled %}

  location {{ item.serve_assets.pattern }} {
    expires {{ item.serve_assets.expires }};
  }
{% endif %}
{% if item.custom_locations %}
  {{ item.custom_locations|indent(2) }}
{% endif %}

{% if item.disallow_hidden_files.enabled %}
  location ~ /\. {
    return 404;
    access_log off;
    log_not_found off;
  }
{% endif %}

  location = /favicon.ico {
    try_files /favicon.ico =204;
    access_log off;
    log_not_found off;
  }

  location / {
    include /etc/nginx/ansible-nginx-conf.d/common_proxy.conf;
{% if item.direct_proxy and item.upstreams -%}
  {% set upstream = item.upstreams|selectattr('name', '==', item.direct_proxy)|first -%}
  {% if upstream -%}
    {% if upstream.add_proxy_settings is defined -%}
      {% for setting in upstream.add_proxy_settings %}
        {{ setting }};

      {% endfor %}
    {% endif %}
    proxy_pass http://{{ upstream.name }};
  {% endif %}
{% elif item.custom_root_location_try_files %}
    try_files {{ item.custom_root_location_try_files }};
{% else %}
    try_files $uri $uri.html $uri/{{ (' @' + item.upstreams[0].name) if (item.upstreams) else ' =404' }};
{% endif %}

{% if item.basic_auth | bool %}
    auth_basic "{{ item.basic_auth_message }}";
    auth_basic_user_file /etc/nginx/.htpasswd;
{% endif %}
  }

{% if item.upstreams %}
{% for upstream in item.upstreams %}

  location @{{ upstream.name }} {
    include /etc/nginx/ansible-nginx-conf.d/common_proxy.conf;
{% if upstream.add_proxy_settings is defined -%}
{% for setting in upstream.add_proxy_settings %}
    {{ setting }};
{% endfor %}
{% endif %}
    proxy_pass http://{{ upstream.name }};
  }
{% endfor %}
{% endif %}
}
